{"title":"OOP SOLID Principles \"L\" - Liskov Substitution Principle","date":"2016-02-18T00:00:00.000Z","tags":"oop","type":"post","intro":"<p>According to the <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">wikipedia</a> the Liskov Substitution Principle (LSP) is defined as:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">Subtype</span> <span class=\"nx\">Requirement</span><span class=\"o\">:</span>\n<span class=\"nx\">Let</span> <span class=\"nx\">f</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"nx\">be</span> <span class=\"nx\">a</span> <span class=\"nx\">property</span> <span class=\"nx\">provable</span> <span class=\"nx\">about</span> <span class=\"nx\">objects</span> <span class=\"nx\">x</span> <span class=\"nx\">of</span> <span class=\"nx\">type</span> <span class=\"nx\">T</span><span class=\"p\">.</span>\n<span class=\"nx\">Then</span> <span class=\"nx\">f</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"nx\">should</span> <span class=\"nx\">be</span> <span class=\"kc\">true</span> <span class=\"k\">for</span> <span class=\"nx\">objects</span> <span class=\"nx\">y</span> <span class=\"nx\">of</span> <span class=\"nx\">type</span> <span class=\"nx\">S</span> <span class=\"nx\">where</span> <span class=\"nx\">S</span> <span class=\"nx\">is</span> <span class=\"nx\">a</span> <span class=\"nx\">subtype</span> <span class=\"nx\">of</span> <span class=\"nx\">T</span><span class=\"p\">.</span>\n</pre></div>\n\n</code></pre><p>The basic idea - if you have an object of type <code>T</code> then you can also use objects of its subclasses instead of it.</p>\n<p>Or, in other words: the subclass should behave the same way as the base class. It can add some new features on top of the base class (that&#39;s the purpose of inheritance, right?), but it can not break expectations about the base class behavior.</p>\n"}
