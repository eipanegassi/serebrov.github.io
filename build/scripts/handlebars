#!/usr/bin/env node

var front = require('front-matter');
var fs = require('fs-extra');
//var Q = require('q');
var markdown = require('./lib/markdown');

// var marked = require('marked');
// // Async highlighting with pygmentize-bundled
// marked.setOptions({
//   highlight: function (code, lang, callback) {
//     require('pygmentize-bundled-cached')({ lang: lang, format: 'html' }, code, function (err, result) {
//       callback(err, result.toString());
//     });
//   }
// });

var optimist = require('optimist')
    .usage('Precompile handlebar templates.\nUsage: $0 template...', {
      'p': {
        'type': 'string',
        'description': 'Partials path',
        'alias': 'partials'
      }
    })
    .check(function(argv) {
      if (argv.version) {
        return;
      }
    });

var registerPatials = require('./lib/registerPartials');
var tplPath = 'build/templates/*.hbs';

registerPatials.register(tplPath)
.then(function(Handlebars) {
  var buffer = fs.readFileSync(optimist.argv._[0]);
  var parsed = front(buffer.toString());
  var meta = parsed.attributes;
  return markdown(parsed.body)
  .then(function(md) {
    meta.body = new Handlebars.SafeString(md);

    var templatePath = meta['template'] ? meta['template'] : 'build/templates/post.hbs';
    var template = fs.readFileSync(templatePath, 'utf-8');
    template = Handlebars.compile(template);
    console.log(template(meta));
  });
});
